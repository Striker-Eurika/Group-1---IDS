import numpy as np
import tensorflow as tf
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import metrics
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler

#tf.device("/cpu:0")
df = pd.read_csv('ThreeTargetDataset.csv', sep=r'\s*,\s*', engine='python')

pd.set_option('use_inf_as_na',True)
df.dropna(inplace=True)

#df2 = pd.read_csv('predictThis.csv')
label_encoder = preprocessing.LabelEncoder()


df['Label']= label_encoder.fit_transform(all['Label'])
#df['Label'].unique()

y = df[['Label']]
#print(y)

x = pd.get_dummies(all.drop(['Label', ], axis = 1))
sc = MinMaxScaler()

x = sc.fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)
X = pd.DataFrame(x_train)

model = Sequential()

#model.add(Dense(units=32, activation='relu', input_dim=len(X.columns)))
model.add(tf.keras.Input(shape=len(X.columns,)))                     # input layer
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(15, activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics='accuracy')

model.fit(x_train, y_train, epochs=50, batch_size=512)
y_test_pred = model.predict(x_test)
#print(y_test_pred)

model.save("mymodel.h5")
saved_model = keras.models.load_model("mymodel.h5")
y_test_pred = saved_model.predict(x_test)

pred_class = np.argmax(y_test_pred, axis=-1)
#print(pred_class)
print('Accuracy score: ', accuracy_score(y_test, pred_class)) #may be 1 because dataset is so different
#model.summary()
