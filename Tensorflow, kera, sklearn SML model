import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import metrics
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('ThreeTargetDataset.csv')
label_encoder = preprocessing.LabelEncoder()
df['Label']= label_encoder.fit_transform(df['Label'])
df['Label'].unique()

y = df[['Label']]
print(y)

x = pd.get_dummies(df.drop(['Label', ], axis = 1))
sc = MinMaxScaler()

x = sc.fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)
X = pd.DataFrame(x_train)

model = Sequential()
print(X.columns)

model.add(Dense(units=32, activation='relu', input_dim=len(X.columns)))
model.add(Dense(units=16, activation='relu'))
model.add(Dense(units=3, activation='sigmoid'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics='accuracy')

model.fit(x_train, y_train, epochs=200, batch_size=32)
y_test_pred = model.predict(x_test)
print(y_test_pred)

pred_class = np.argmax(y_test_pred, axis=-1)
print(pred_class)
print('Accuracy score: ', accuracy_score(y_test, pred_class)) #may be 1 because dataset is so different
