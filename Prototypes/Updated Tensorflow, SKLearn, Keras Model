#TF_GPU_HOST_MEM_LIMIT_IN_MB=5950
#physical_devices = tf.config.list_physical_devices('GPU')
try:
  tf.config.experimental.set_memory_growth(physical_devices[0], False)
except:
  # Invalid device or cannot modify virtual devices once initialized.
  pass

from keras.utils import np_utils

label_encoder = preprocessing.LabelEncoder()

y = ConcatenateAttackList.Label
encoded_y = label_encoder.fit_transform(y)
y = np_utils.to_categorical(encoded_y)

x = ConcatenateAttackList.drop(['Label', ], axis = 1).astype(float)

sc = MinMaxScaler()
print('x_train, y_train, fitting and transforming.')
x = sc.fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42,
                                                    stratify=encoded_y,shuffle=True)
X = pd.DataFrame(x_train)
print('x_train, y_train, fitted and transformed.')

with tf.device("CPU"):
    train = tf.data.Dataset.from_tensor_slices((x_train, y_train)).shuffle(4*512).batch(512)
    validate = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(512)
    
model = Sequential()
print('Model initialized.')

model.add(Dense(64,input_dim=len(X.columns),activation='relu'))                     # input layer
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(5, activation='softmax'))
print('Nodes added to layers.')
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics='accuracy')
print('Compiled.')

callback=tf.keras.callbacks.EarlyStopping(monitor='val_loss', mode='auto', 
                                          patience=20, min_delta=1e-3, restore_best_weights=True, verbose=2)
print('EarlyStopping CallBack executed.')

print('Beginning fitting...')    
model_hist = model.fit(x_train, y_train, epochs=300, batch_size=256, verbose=1,
                       callbacks=[callback],validation_data=validate)
print('Fitting completed.')               
model.save("sets/mymodel5.h5")
dump(sc, 'sets/scaler_transformTCPDCV5.joblib')
print('Model saved.')  

#------------PREDICTION
tester = pd.read_csv('AttackTestFile.csv', sep=r'\s*,\s*', engine='python')
ColumnsForWindowsCIC = pd.read_csv('ColumnsForWindowsCIC.csv')
tester.columns = ColumnsForWindowsCIC.columns

x = tester.drop(['Label', ], axis = 1)

fit_new_input = sc.transform(x)

predict_y=model.predict(fit_new_input)
predict_y
classes_y=np.argmax(predict_y,axis=1)
classes_y

predict = label_encoder.inverse_transform(classes_y)
predict
